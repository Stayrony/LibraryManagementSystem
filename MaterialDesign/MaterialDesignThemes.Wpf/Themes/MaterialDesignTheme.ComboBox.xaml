<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" IsNotEmptyValue="Collapsed" />
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2 2 2 2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <system:Double x:Key="PopupContentPresenterExtend">4</system:Double>
    <system:Double x:Key="PopupTopBottomMargin">8</system:Double>
    <system:Double x:Key="PopupLeftRightMargin">16</system:Double>

    <ControlTemplate x:Key="PopupContentUpTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding ElementName=templateRoot, Path=ActualWidth, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                          Margin="6">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border Background="Transparent"
                                BorderBrush="{DynamicResource MaterialDesignShadowBrush}"
                                BorderThickness="1"
                                CornerRadius="2">
                <Border.Effect>
                    <BlurEffect Radius="6"/>
                </Border.Effect>
            </Border>
            <Grid Margin="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Grid.Row="0"
                           Fill="{DynamicResource MaterialDesignPaper}"
                           Height="{StaticResource PopupTopBottomMargin}"/>
                <ContentPresenter Grid.Row="1"/>
                <Rectangle Grid.Row="2"
                           Fill="{DynamicResource MaterialDesignPaper}"
                           Height="{StaticResource PopupContentPresenterExtend}"/>

                <Grid Grid.Row="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Grid.Column="0"
                               Width="{StaticResource PopupLeftRightMargin}"
                               Fill="{DynamicResource MaterialDesignPaper}"/>
                    <Grid Grid.Column="1"
                          Width="{Binding ElementName=templateRoot, Path=ActualWidth}"
                          Height="{Binding ElementName=templateRoot, Path=ActualHeight}"/>
                    <Rectangle Grid.Column="2"
                               MinWidth="{StaticResource PopupLeftRightMargin}"
                               Fill="{DynamicResource MaterialDesignPaper}"/>
                </Grid>

                <Rectangle Grid.Row="4"
                           Height="{StaticResource PopupTopBottomMargin}"
                           Fill="{DynamicResource MaterialDesignPaper}" />
            </Grid>
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="PopupContentDownTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding ElementName=templateRoot, Path=ActualWidth, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
              Margin="6">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border Background="Transparent"
                                BorderBrush="{DynamicResource MaterialDesignShadowBrush}"
                                BorderThickness="1"
                                CornerRadius="2">
                <Border.Effect>
                    <BlurEffect Radius="6"/>
                </Border.Effect>
            </Border>
            <Grid Margin="1"
                  SnapsToDevicePixels="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Grid.Row="0"
                           Fill="{DynamicResource MaterialDesignPaper}"
                           Height="{StaticResource PopupTopBottomMargin}"/>
                
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Grid.Column="0"
                               Width="{StaticResource PopupLeftRightMargin}"
                               Fill="{DynamicResource MaterialDesignPaper}"
                               />
                    <Grid Grid.Column="1"
                          Width="{Binding ElementName=templateRoot, Path=ActualWidth}"
                          Height="{Binding ElementName=templateRoot, Path=ActualHeight}"/>
                    <Rectangle Grid.Column="2"
                               MinWidth="{StaticResource PopupLeftRightMargin}"
                               Fill="{DynamicResource MaterialDesignPaper}"
                               />
                </Grid>

                <Rectangle Grid.Row="2"
                           Fill="{DynamicResource MaterialDesignPaper}"
                           Height="{StaticResource PopupContentPresenterExtend}"/>

                <ContentPresenter Grid.Row="3"/>

                <Rectangle Grid.Row="4"
                           Height="{StaticResource PopupTopBottomMargin}"
                           Fill="{DynamicResource MaterialDesignPaper}" />
            </Grid>
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="PopupContentDefaultTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding ElementName=templateRoot, Path=ActualWidth, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                          Margin="6">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border Background="Transparent"
                                BorderBrush="{DynamicResource MaterialDesignShadowBrush}"
                                BorderThickness="1"
                                CornerRadius="2">
                <Border.Effect>
                    <BlurEffect Radius="6"/>
                </Border.Effect>
            </Border>
            <Grid Margin="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Grid.Row="0"
                           Fill="{DynamicResource MaterialDesignPaper}"
                           Height="{StaticResource PopupTopBottomMargin}"/>

                <ContentPresenter Grid.Row="1"/>

                <Rectangle Grid.Row="2"
                                   Height="{StaticResource PopupTopBottomMargin}"
                                   Fill="{DynamicResource MaterialDesignPaper}" />
            </Grid>
        </Grid>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="1 0 1 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
        <Grid x:Name="GridWrapper">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                            <VisualTransition.GeneratedEasingFunction>
                                <CircleEase EasingMode="EaseOut" />
                            </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="MouseOverBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup Name="SelectionStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Selected">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.18" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unselected" />
                </VisualStateGroup>
                <VisualStateGroup Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Focused">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="MouseOverBorder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BackBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="true" />

            <Border x:Name="MouseOverBorder"
                    Background="{TemplateBinding Foreground,
                                                 Converter={StaticResource BrushRoundConverter}}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Opacity="0"
                    SnapsToDevicePixels="true" />
            <Border x:Name="SelectedBorder"
                    Background="{TemplateBinding Foreground,
                                                 Converter={StaticResource BrushRoundConverter}}"
                    Opacity="0"
                    RenderTransformOrigin="0.5,0.5" />
            <wpf:Ripple HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                        Feedback="{TemplateBinding Foreground,
                                                   Converter={StaticResource BrushRoundConverter}}"
                        Focusable="False"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="GridWrapper" Property="Opacity" Value="0.56" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Tag" Value="1.0" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Height" Value="0"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="16 8" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignComboBoxItemTemplate}" />
    </Style>

    <Style x:Key="MaterialDesignComboBoxItemSelectedCollapsedStyle"
           BasedOn="{StaticResource MaterialDesignComboBoxItemStyle}"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Tag" Value="1.0" />
    </Style>

    <Style x:Key="MaterialDesignComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="templateRoot"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Border x:Name="splitBorder"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    BorderBrush="Transparent"
                                    BorderThickness="0">
                                <Path x:Name="arrow"
                                              Width="8" Height="8"
                                              Margin="0"
                                              Stretch="Uniform"
                                              HorizontalAlignment="Right"
                                              VerticalAlignment="Center"
                                              Data="M7,10L12,15L17,10H7Z"
                                              Fill="{TemplateBinding BorderBrush}" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="MaterialDesignComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="toggleButton"
                          Grid.ColumnSpan="2"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource MaterialDesignComboBoxToggleButton}" />
            <Grid Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock x:Name="Hint"
                           IsHitTestVisible="False"
                           Opacity="{Binding Path=(wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                           Text="{TemplateBinding wpf:TextFieldAssist.Hint}"
                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                           Visibility="{TemplateBinding Text, Converter={StaticResource TextFieldHintVisibilityConverter}}" />
                <ContentPresenter x:Name="contentPresenter"
                                  Content="{TemplateBinding SelectionBoxItem}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  IsHitTestVisible="false"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                <TextBox x:Name="PART_EditableTextBox"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                         Visibility="Collapsed" />
            </Grid>
            <wpf:Underline x:Name="Underline"
                           Grid.ColumnSpan="2"
                           IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                           Visibility="Collapsed" />

            <wpf:ComboBoxPopup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="False"
                               HorizontalOffset="-11"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PlacementTarget="{Binding ElementName=templateRoot}"
                               Placement="Custom"
                               SnapsToDevicePixels="True"
                               PopupAnimation="Fade"
                               VerticalOffset="0"
                               DefaultVerticalOffset="5"
                               DownVerticalOffset="-15"
                               UpVerticalOffset="15"
                               UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                               DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                               DefaultContentTemplate="{StaticResource PopupContentDefaultTemplate}">
                <ContentControl>
                    <ScrollViewer Background="{DynamicResource MaterialDesignPaper}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </ContentControl>
            </wpf:ComboBoxPopup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False"/>
                    <Condition Property="IsDropDownOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="toggleButton" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <!--
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="shadow" Property="Height" Value="95" />
            </Trigger>
            -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="MaterialDesignFloatingHintComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="MaterialDesignStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition From="*" To="MaterialDesignStateTextNotEmpty">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" Storyboard.TargetName="Hint"
                                                             Duration="0:0:0.3" To="10">
                                    <DoubleAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Hint"
                                                             Duration="0:0:0.3" To="1">
                                    <DoubleAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <ThicknessAnimation Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="Hint"
                                                                Duration="0:0:0.3" To="1,-12,1,0">
                                    <ThicknessAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </VisualTransition>
                        <VisualTransition From="*" To="MaterialDesignStateTextEmpty">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="FontSize" Storyboard.TargetName="Hint"
                                                             Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Hint"
                                                             Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <ThicknessAnimation Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="Hint"
                                                                Duration="0:0:0.3">
                                    <ThicknessAnimation.EasingFunction>
                                        <SineEase EasingMode="EaseOut" />
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="MaterialDesignStateTextNotEmpty">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="FontSize" Storyboard.TargetName="Hint"
                                                         Duration="0" To="10" />
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Hint"
                                                         Duration="0" To="1" />
                            <ThicknessAnimation Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="Hint"
                                                            Duration="0" To="1,-12,1,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MaterialDesignStateTextEmpty">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="FontSize" Storyboard.TargetName="Hint"
                                                         Duration="0" />
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Hint"
                                                         Duration="0" />
                            <ThicknessAnimation Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="Hint"
                                                            Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="0 12 0 0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
                <TextBlock x:Name="Hint"
                           Margin="{TemplateBinding Padding}"
                           FontSize="{TemplateBinding FontSize}"
                           HorizontalAlignment="Left"
                           IsHitTestVisible="False"
                           VerticalAlignment="Top"
                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                           Opacity="{Binding Path=(wpf:TextFieldAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                           Text="{TemplateBinding wpf:TextFieldAssist.Hint}" />
                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                      Margin="{TemplateBinding Padding}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                    <ContentPresenter x:Name="contentPresenter"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="False"/>
                    <TextBox x:Name="PART_EditableTextBox"
                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                             Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                             Visibility="Collapsed" />
                </Grid>
                <wpf:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="Collapsed" />

                <wpf:ComboBoxPopup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="False"
                               HorizontalOffset="-11"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PlacementTarget="{Binding ElementName=templateRoot}"
                               SnapsToDevicePixels="True"
                               UseLayoutRounding="True"
                               Placement="Custom"
                               PopupAnimation="Fade"
                               VerticalOffset="0"
                               DefaultVerticalOffset="5"
                               DownVerticalOffset="-15"
                               UpVerticalOffset="15"
                               UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                               DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                               DefaultContentTemplate="{StaticResource PopupContentDefaultTemplate}">
                    <ContentControl>
                        <ScrollViewer Background="{DynamicResource MaterialDesignPaper}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </ContentControl>
                </wpf:ComboBoxPopup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False"/>
                    <Condition Property="IsDropDownOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="toggleButton" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="wpf:TextFieldAssist.IsNullOrEmpty" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="0 4 0 5" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource MaterialDesignComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDesignFloatingHintComboBox"
           BasedOn="{StaticResource MaterialDesignComboBox}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate}" />
        <Setter Property="wpf:TextFieldAssist.Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Setter Property="wpf:TextFieldAssist.Managed" Value="{Binding RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
